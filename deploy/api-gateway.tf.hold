resource "aws_api_gateway_rest_api" "api_gateway" {
 name = "api_gateway"
 description = "Proxy to handle requests to our API"

 endpoint_configuration {
    types = ["EDGE"]
  }

  policy = <<POLICY
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Principal": "*",
            "Action": "execute-api:Invoke",
            "Resource": "execute-api:/*/GET/*"
        },
        {
            "Effect": "Allow",
            "Principal": "*",
            "Action": "execute-api:Invoke",
            "Resource": "execute-api:/*/POST/*"
        },
        {
            "Effect": "Allow",
            "Principal": "*",
            "Action": "lambda:InvokeFunction",
            "Resource": "lambda:*"
        }
    ]
}
POLICY
}

resource "aws_api_gateway_deployment" "dev_deploy" {
  depends_on = [
    "aws_api_gateway_integration.csr_lambda"
  ]

  rest_api_id = "${aws_api_gateway_rest_api.api_gateway.id}"
  stage_name = "dev"
}

// csr
resource "aws_api_gateway_resource" "csr_resource" {
  rest_api_id = "${aws_api_gateway_rest_api.api_gateway.id}"
  parent_id = "${aws_api_gateway_rest_api.api_gateway.root_resource_id}"

  path_part = "csr"
}

resource "aws_api_gateway_method" "csr_method" {
  rest_api_id = "${aws_api_gateway_rest_api.api_gateway.id}"
  resource_id = "${aws_api_gateway_resource.csr_resource.id}"
  http_method = "POST"
  authorization = "NONE"
}

resource "aws_api_gateway_integration" "csr_lambda" {
  rest_api_id = "${aws_api_gateway_rest_api.api_gateway.id}"
  resource_id = "${aws_api_gateway_method.csr_method.resource_id}"
  http_method = "${aws_api_gateway_method.csr_method.http_method}"

  integration_http_method = "POST"
  type = "AWS_PROXY"
  uri = "${aws_lambda_function.sign_user_certificate.invoke_arn}"
}

resource "aws_lambda_permission" "csr" {
  statement_id  = "AllowAPIGatewayInvoke"
  action        = "lambda:InvokeFunction"
  function_name = "${aws_lambda_function.sign_user_certificate.arn}"
  principal     = "apigateway.amazonaws.com"

  #--------------------------------------------------------------------------------
  # Per deployment
  #--------------------------------------------------------------------------------
  # The /*/*  grants access from any method on any resource within the deployment.
  # source_arn = "${aws_api_gateway_deployment.test.execution_arn}/*/*"

  #--------------------------------------------------------------------------------
  # Per API
  #--------------------------------------------------------------------------------
  # The /*/*/* part allows invocation from any stage, method and resource path
  # within API Gateway REST API.
  source_arn    = "${aws_api_gateway_rest_api.api_gateway.execution_arn}/*/*/*"
}

// get ca certs
resource "aws_api_gateway_resource" "get_ca_intermediate_resource" {
  rest_api_id = "${aws_api_gateway_rest_api.api_gateway.id}"
  parent_id = "${aws_api_gateway_rest_api.api_gateway.root_resource_id}"

  path_part = "get_ca_intermediate"
}

resource "aws_api_gateway_method" "get_ca_intermediate_method" {
  rest_api_id = "${aws_api_gateway_rest_api.api_gateway.id}"
  resource_id = "${aws_api_gateway_resource.get_ca_intermediate_resource.id}"
  http_method = "POST"
  authorization = "NONE"
}

resource "aws_api_gateway_integration" "get_ca_intermediate_lambda" {
  rest_api_id = "${aws_api_gateway_rest_api.api_gateway.id}"
  resource_id = "${aws_api_gateway_method.get_ca_intermediate_method.resource_id}"
  http_method = "${aws_api_gateway_method.get_ca_intermediate_method.http_method}"

  integration_http_method = "POST"
  type = "AWS_PROXY"
  uri = "${aws_lambda_function.get_ca_intermediate.invoke_arn}"
}

resource "aws_lambda_permission" "get_ca_intermediate" {
  statement_id  = "AllowAPIGatewayInvoke"
  action        = "lambda:InvokeFunction"
  function_name = "${aws_lambda_function.get_ca_intermediate.arn}"
  principal     = "apigateway.amazonaws.com"


  source_arn    = "${aws_api_gateway_rest_api.api_gateway.execution_arn}/*/*/*"
}


