data "archive_file" "cert_sign_csr" {
  type = "zip"
  source_file = "${path.module}/../builds/cert_sign_csr"
  output_path = "${path.module}/../builds/cert_sign_csr.zip"
}

resource "aws_lambda_function" "get_ca_intermediate" {
	function_name = "get_ca_intermediate"
	role = "${aws_iam_role.get_ca_intermediate_role.arn}"
	s3_bucket = "${var.bucket}"
	s3_key = "get_ca_intermediate_lambda.zip"
	handler = "builds/get_ca_intermediate_lambda"
	runtime = "go1.x"
	timeout = "10"
	memory_size = 1024
	source_code_hash = "${filebase64sha256("../builds/get_ca_intermediate_lambda.zip")}"

  depends_on = ["aws_iam_role_policy_attachment.get_ca_intermediate_role_policy_attach_logs"]
}

resource "aws_iam_role" "get_ca_intermediate_role" {
  name = "get_ca_intermediate_role"

  assume_role_policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Principal": {
        "Service": "lambda.amazonaws.com"
      },
      "Action": "sts:AssumeRole"
    }
  ]
}
EOF

}

resource "aws_iam_role_policy_attachment" "get_ca_intermediate_role_policy_attach_s3" {
  role = "${aws_iam_role.get_ca_intermediate_role.name}"
  policy_arn = "${aws_iam_policy.s3_policy.arn}"
}

resource "aws_iam_role_policy_attachment" "get_ca_intermediate_role_policy_attach_logs" {
  role = "${aws_iam_role.get_ca_intermediate_role.name}"
  policy_arn = "${aws_iam_policy.logging_policy.arn}"
}

resource "aws_iam_role_policy_attachment" "get_ca_intermediate_role_policy_secrets_manager_mysql" {
  role = "${aws_iam_role.get_ca_intermediate_role.name}"
  policy_arn = "${aws_iam_policy.secrets_manager_mysql.arn}"
}

resource "aws_iam_role_policy_attachment" "get_ca_intermediate_role_policy_ec2_network_policy" {
  role = "${aws_iam_role.get_ca_intermediate_role.name}"
  policy_arn = "${aws_iam_policy.ec2_network_policy.arn}"
}

