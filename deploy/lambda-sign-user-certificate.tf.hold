resource "aws_lambda_function" "sign_user_certificate" {
	function_name = "sign_user_certificate"
	role = "${aws_iam_role.sign_user_certificate_role.arn}"
	s3_bucket = "${var.bucket}"
	s3_key = "sign_user_certificate_lambda.zip"
	handler = "builds/sign_user_certificate_lambda"
	runtime = "go1.x"
	timeout = "10"
	memory_size = 1024
	source_code_hash = "${filebase64sha256("../builds/sign_user_certificate_lambda.zip")}"

  depends_on = ["aws_iam_role_policy_attachment.sign_user_certificate_role_policy_attach_logs"]
}

resource "aws_iam_role" "sign_user_certificate_role" {
  name = "sign_user_certificate_role"

  assume_role_policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Principal": {
        "Service": "lambda.amazonaws.com"
      },
      "Action": "sts:AssumeRole"
    }
  ]
}
EOF

}

resource "aws_iam_role_policy_attachment" "sign_user_certificate_role_policy_attach_s3" {
  role = "${aws_iam_role.sign_user_certificate_role.name}"
  policy_arn = "${aws_iam_policy.s3_policy.arn}"
}

resource "aws_iam_role_policy_attachment" "sign_user_certificate_role_policy_attach_logs" {
  role = "${aws_iam_role.sign_user_certificate_role.name}"
  policy_arn = "${aws_iam_policy.logging_policy.arn}"
}

resource "aws_iam_role_policy_attachment" "sign_user_certificate_role_policy_attach_dynamodb" {
	role = "${aws_iam_role.sign_user_certificate_role.name}"
	policy_arn = "${aws_iam_policy.certificate_ledger_access_policy.arn}"
}

resource "aws_iam_role_policy_attachment" "sign_user_certificate_role_policy_attach_secrets_manager_get" {
	role = "${aws_iam_role.sign_user_certificate_role.name}"
	policy_arn = "${aws_iam_policy.secrets_manager_get_access_policy.arn}"
}
