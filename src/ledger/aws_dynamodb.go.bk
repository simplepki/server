package ledger

import (
	"encoding/base64"
	"errors"
	"fmt"
	"log"
	"strings"

	"github.com/simplepki/core/keypair"
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/dynamodb"
	"github.com/aws/aws-sdk-go/service/dynamodb/dynamodbattribute"
)

type CertificateLedger struct {
	CertName    string      `json:"CertName"`
	Certificate interface{} `json:"Certificate"`
}

type AWSDynamoLedger struct{}

func (dynamo AWSDynamoLedger) Publish(kp keypair.KeyPair) {

	config := &aws.Config{}
	session := session.Must(session.NewSession(config))

	db := dynamodb.New(session)

	log.Printf("saving %#v to db %#v\n", kp, db)

	ledgerEntry := CertificateLedger{
		CertName:    kp.GetCertificate().Subject.CommonName,
		Certificate: kp.GetCertificate().Raw,
	}

	item, err := dynamodbattribute.MarshalMap(ledgerEntry)
	if err != nil {
		log.Fatal(err)
	}

	input := &dynamodb.PutItemInput{
		Item:      item,
		TableName: aws.String("CertificateLedger"),
	}

	log.Printf("new dynamodb item: %#v\n", input)

	resp, err := db.PutItem(input)
	if err != nil {
		log.Fatal(err)
	}

	log.Printf("dynamodb response: %#v\n", resp)
}

func (dynamo AWSDynamoLedger) Exists(path string) bool {

	config := &aws.Config{}
	session := session.Must(session.NewSession(config))

	db := dynamodb.New(session)

	input := &dynamodb.QueryInput{
		TableName: aws.String("CertificateLedger"),
		KeyConditions: map[string]*dynamodb.Condition{
			"CertName": &dynamodb.Condition{
				ComparisonOperator: aws.String("EQ"),
				AttributeValueList: []*dynamodb.AttributeValue{
					&dynamodb.AttributeValue{
						S: aws.String(path),
					},
				},
			},
		},
	}

	resp, err := db.Query(input)
	if err != nil {
		log.Fatal(err.Error())
	}
	certs := []CertificateLedger{}
	err = dynamodbattribute.UnmarshalListOfMaps(resp.Items, &certs)

	if len(certs) > 0 {
		return true
	}

	return false
}

func (dynamo AWSDynamoLedger) GetChain(path string) []string {
	/*
		config := &aws.Config{}
		session := session.Must(session.NewSession(config))

		db := dynamodb.New(session)
	*/
	// split spiffe path to get multiple certs
	if strings.HasPrefix(path, "spiffe://") {
		paths := strings.Split(path[9:], "/")
		log.Printf("getting certs for path: %#v\n", paths)
		var certPath string
		chainb64 := make([]string, len(paths))
		config := &aws.Config{}
		session := session.Must(session.NewSession(config))

		db := dynamodb.New(session)
		for idx, pathName := range paths {
			if idx == 0 {
				certPath = fmt.Sprintf("spiffe://%s", pathName)
			} else {
				certPath = fmt.Sprintf("%s/%s", certPath, pathName)
			}

			log.Printf("looking up path: %#v\n", certPath)
			input := &dynamodb.QueryInput{
				TableName: aws.String("CertificateLedger"),
				KeyConditions: map[string]*dynamodb.Condition{
					"CertName": &dynamodb.Condition{
						ComparisonOperator: aws.String("EQ"),
						AttributeValueList: []*dynamodb.AttributeValue{
							&dynamodb.AttributeValue{
								S: aws.String(certPath),
							},
						},
					},
				},
			}

			resp, err := db.Query(input)
			if err != nil {
				log.Fatal(err.Error())
			}
			certs := []CertificateLedger{}
			err = dynamodbattribute.UnmarshalListOfMaps(resp.Items, &certs)

			if err != nil {
				log.Fatal(err.Error())
			}

			if len(certs) < 1 {
				log.Fatal(errors.New("certificate ledger should return at least a certificate per path"))
			}

			for ledgerIdx, ledgerItem := range certs {
				log.Printf("entry %v for cert %#v\n", ledgerIdx, ledgerItem.CertName)
			}

			chainb64[idx] = base64.StdEncoding.EncodeToString(certs[0].Certificate.([]byte))

		}

		return chainb64
	} else {
		log.Fatal(errors.New("not a spiffe path").Error())
		return []string{}
	}
}
